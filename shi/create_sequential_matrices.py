#!/usr/bin/env python3
"""
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
"""

import json
import numpy as np
import os
import time
from typing import List, Dict, Any
from star_matrix_processor import StarMatrixProcessor
from astroquery.gaia import Gaia


def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gaia Archive"""
    print("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gaia Archive...")

    try:
        query = "SELECT TOP 1 source_id FROM gaiadr3.gaia_source WHERE parallax > 0"

        Gaia.ROW_LIMIT = 1
        Gaia.TIMEOUT = 30

        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        job = Gaia.launch_job_async(query)

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        results = job.get_results()

        if len(results) > 0:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def fetch_stars_and_save(limit: int) -> bool:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã"""
    print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –∑–≤–µ–∑–¥...")

    query = f"""
    SELECT TOP {limit}
        source_id,
        ra,
        dec,
        parallax,
        pmra,
        pmdec,
        phot_g_mean_mag,
        bp_rp
    FROM gaiadr3.gaia_source
    WHERE parallax > 0
    AND parallax_error/parallax < 0.3
    AND phot_g_mean_mag IS NOT NULL
    AND phot_g_mean_mag < 20
    ORDER BY parallax DESC
    """

    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

        Gaia.ROW_LIMIT = limit
        Gaia.TIMEOUT = 120

        job = Gaia.launch_job_async(query)

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        results = job.get_results()

        if len(results) > 0:
            stars = []

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            def safe_float(value):
                if value is None or (hasattr(value, 'mask') and value.mask):
                    return None
                try:
                    return float(value)
                except (ValueError, TypeError):
                    return None

            for row in results:
                star = {
                    'source_id': int(row['source_id']),
                    'ra': float(row['ra']),
                    'dec': float(row['dec']),
                    'parallax': float(row['parallax']),
                    'pmra': safe_float(row['pmra']) or 0.0,
                    'pmdec': safe_float(row['pmdec']) or 0.0,
                    'phot_g_mean_mag': safe_float(row['phot_g_mean_mag']),
                    'bp_rp': safe_float(row['bp_rp'])
                }
                stars.append(star)

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(stars)} –∑–≤–µ–∑–¥")

            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
            return create_and_save_matrix(stars, limit)
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


def create_and_save_matrix(stars_data: List[Dict[str, Any]], limit: int) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    print(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(stars_data)} –∑–≤–µ–∑–¥...")

    try:
        processor = StarMatrixProcessor()
        processed_stars = processor.process_star_data(stars_data)

        if not processed_stars:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            return False

        matrix = processor.create_distance_matrix(processed_stars)

        if matrix.size == 0:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã")
            return False

        print(f"üìä –°–æ–∑–¥–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º {matrix.shape}")
        print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {np.min(matrix):.2f} - {np.max(matrix):.2f} –ø–∞—Ä—Å–µ–∫")

        processor.save_matrix_as_tsp(matrix, "best.txt")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        formatted_file = f"stars_{limit}_formatted.txt"
        with open(formatted_file, 'w', encoding='utf-8') as f:
            f.write(f"{len(processed_stars)}\n")

            for i in range(len(processed_stars)):
                row = []
                for j in range(len(processed_stars)):
                    if i == j:
                        row.append("-1")
                    else:
                        distance = int(round(matrix[i][j]))
                        row.append(str(distance))
                f.write(", ".join(row) + "\n")

        print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {formatted_file}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Ñ–∞–π–ª —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        raw_file = f"stars_{limit}_raw.txt"
        with open(raw_file, 'w', encoding='utf-8') as f:
            f.write(f"# –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É {len(processed_stars)} –∑–≤–µ–∑–¥–∞–º–∏\n")
            f.write(f"# –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: {len(processed_stars)}x{len(processed_stars)}\n")
            f.write(f"# –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –ø–∞—Ä—Å–µ–∫–∏\n")
            f.write(f"# –î–∏–∞–ø–∞–∑–æ–Ω: {np.min(matrix):.6f} - {np.max(matrix):.6f}\n")
            f.write(f"# –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.mean(matrix):.6f}\n")
            f.write(f"# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(matrix):.6f}\n")
            f.write("#\n")

            for i in range(len(processed_stars)):
                row = []
                for j in range(len(processed_stars)):
                    if i == j:
                        row.append("0.000000")
                    else:
                        distance = matrix[i][j]
                        row.append(f"{distance:.6f}")
                f.write(" ".join(row) + "\n")

        print(f"‚úÖ –°—ã—Ä–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {raw_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {len(processed_stars)}x{len(processed_stars)}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü"""
    print("üöÄ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶ –†–ê–°–°–¢–û–Ø–ù–ò–ô")
    print("–°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è 1000, 2000, 3000, 4000, 5000 –∑–≤–µ–∑–¥")
    print("=" * 60)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gaia Archive")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    limits = [10000]

    for limit in limits:
        print(f"\n{'='*50}")
        print(f"üéØ –û–ë–†–ê–ë–û–¢–ö–ê {limit} –ó–í–ï–ó–î")
        print(f"{'='*50}")

        success = fetch_stars_and_save(limit)

        if success:
            print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è {limit} –∑–≤–µ–∑–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è {limit} –∑–≤–µ–∑–¥")
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É...")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if limit < limits[-1]:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            print(f"\n‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            time.sleep(30)

    print(f"\n{'='*60}")
    print("üéâ –ó–ê–í–ï–†–®–ï–ù–û –°–û–ó–î–ê–ù–ò–ï –í–°–ï–• –ú–ê–¢–†–ò–¶")
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for limit in limits:
        print(f"   - stars_{limit}_formatted.txt")
        print(f"   - stars_{limit}_raw.txt")
    print(f"{'='*60}")


if __name__ == "__main__":
    main()
