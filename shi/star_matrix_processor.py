#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ Gaia
"""

import json
import numpy as np
import os
from typing import List, Dict, Any, Tuple
from pathlib import Path


class StarMatrixProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –µ–≤–∫–ª–∏–¥–æ–≤—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –∑–≤–µ–∑–¥–∞–º–∏"""

    def __init__(self):
        self.processed_stars = []
        self.distance_matrix = None

    def load_star_data(self, file_path: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if not isinstance(data, list):
                raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∑–≤–µ–∑–¥")

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–≤–µ–∑–¥ –∏–∑ {file_path}")
            return data

        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def process_star_data(self, star_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π"""
        if not star_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []

        processed_stars = []
        valid_count = 0

        for star in star_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                required_fields = ['source_id', 'ra', 'dec', 'parallax']
                if not all(field in star for field in required_fields):
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                source_id = star['source_id']
                ra = float(star['ra'])  # –ø—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
                dec = float(star['dec'])  # —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
                parallax = float(star['parallax'])  # –ø–∞—Ä–∞–ª–ª–∞–∫—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥—É–≥–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
                if parallax <= 0:
                    continue

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞—Ä—Å–µ–∫–∞—Ö
                distance = 1000.0 / parallax  # —Ñ–æ—Ä–º—É–ª–∞: d = 1/p (–ø–∫)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
                ra_rad = np.radians(ra)
                dec_rad = np.radians(dec)

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–∫–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x = distance * np.cos(dec_rad) * np.cos(ra_rad)
                y = distance * np.cos(dec_rad) * np.sin(ra_rad)
                z = distance * np.sin(dec_rad)

                # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                velocity = 0.0
                if 'pmra' in star and 'pmdec' in star:
                    try:
                        pmra = float(star['pmra'])  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ RA (–º—Å/–≥–æ–¥)
                        pmdec = float(star['pmdec'])  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ Dec (–º—Å/–≥–æ–¥)

                        # –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
                        velocity = np.sqrt(pmra**2 + pmdec**2)
                    except (ValueError, TypeError):
                        velocity = 0.0

                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                processed_star = {
                    'source_id': source_id,
                    'ra': ra,
                    'dec': dec,
                    'parallax': parallax,
                    'distance': distance,
                    'x': x,
                    'y': y,
                    'z': z,
                    'velocity': velocity
                }

                processed_stars.append(processed_star)
                valid_count += 1

            except (ValueError, TypeError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–µ–∑–¥—ã {star.get('source_id', 'unknown')}: {e}")
                continue

        self.processed_stars = processed_stars
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {valid_count} –∑–≤–µ–∑–¥ –∏–∑ {len(star_data)}")

        if valid_count == 0:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–≤–µ–∑–¥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        return processed_stars


    def create_distance_matrix(self, processed_stars: List[Dict[str, Any]], chunk_size=500) -> np.ndarray:
        if not processed_stars:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã")
            return np.array([])

        coords = np.array([[star['x'], star['y'], star['z']] for star in processed_stars])
        n = coords.shape[0]
        matrix = np.zeros((n, n), dtype=np.float32)

        print(f"üìê –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è {n} –∑–≤–µ–∑–¥ —á–∞–Ω–∫–∞–º–∏ –ø–æ {chunk_size}...")

        for i in range(0, n, chunk_size):
            i_end = min(i + chunk_size, n)
            ci = coords[i:i_end]

        # Use broadcasting to compute distances to all stars
            diff = ci[:, np.newaxis, :] - coords[np.newaxis, :, :]
            dists = np.linalg.norm(diff, axis=-1)

            matrix[i:i_end] = dists

        self.distance_matrix = matrix

        non_zero = matrix[matrix > 0]
        print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {matrix.shape[0]}x{matrix.shape[1]}")
        if non_zero.size > 0:
            print(f"   - –ú–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.min(non_zero):.2f} –ø–∫")
            print(f"   - –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.max(non_zero):.2f} –ø–∫")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.mean(non_zero):.2f} –ø–∫")
        else:
            print("‚ö†Ô∏è –ú–∞—Ç—Ä–∏—Ü–∞ –ø—É—Å—Ç–∞—è")

        return matrix
    def sort_stars_by_distance(self, processed_stars: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤–µ–∑–¥ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –¥–∞–ª—å–Ω–∏–º)"""
        if not processed_stars:
            return []

        sorted_stars = sorted(processed_stars, key=lambda x: x['distance'])

        print(f"üìä –ó–≤–µ–∑–¥—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:")
        print(f"   - –ë–ª–∏–∂–∞–π—à–∞—è: {sorted_stars[0]['distance']:.2f} –ø–∫")
        print(f"   - –î–∞–ª—å–Ω—è—è: {sorted_stars[-1]['distance']:.2f} –ø–∫")

        return sorted_stars

    def save_processed_data(self, processed_stars: List[Dict[str, Any]], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(processed_stars, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


    def save_matrix_to_file(self, matrix: np.ndarray, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–≤–µ–∑–¥ –∫–∞–∫ float"""
        try:
            with open(output_file, 'w') as f:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–≤–µ–∑–¥
                for i, star in enumerate(self.processed_stars):
                    f.write(f"{i+1} {star['x']:.6f} {star['y']:.6f}\n")

                f.write("EOF\n")

            print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã: {e}")


    def save_matrix_as_tsp(self, matrix: np.ndarray, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSPLIB (FULL_MATRIX)"""
        try:
            n = matrix.shape[0]

            with open(output_file, 'w') as f:
                f.write("NAME: star_distance_tsp\n")
                f.write("TYPE: TSP\n")
                f.write(f"DIMENSION: {n}\n")
                f.write("EDGE_WEIGHT_TYPE: EXPLICIT\n")
                f.write("EDGE_WEIGHT_FORMAT: FULL_MATRIX\n")
                f.write("EDGE_WEIGHT_SECTION\n")

                for row in matrix:
                    line = ' '.join(f"{int(round(val))}" for val in row)
                    f.write(line + "\n")

                f.write("EOF\n")

            print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ TSP —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ TSP-–º–∞—Ç—Ä–∏—Ü—ã: {e}")


    def print_statistics(self, processed_stars: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∑–≤–µ–∑–¥–∞–º"""
        if not processed_stars:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        distances = [star['distance'] for star in processed_stars]
        velocities = [star['velocity'] for star in processed_stars]

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –ó–í–ï–ó–î:")
        print(f"   - –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {len(processed_stars)}")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.mean(distances):.2f} –ø–∫")
        print(f"   - –ú–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.min(distances):.2f} –ø–∫")
        print(f"   - –ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.max(distances):.2f} –ø–∫")
        print(f"   - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {np.mean(velocities):.2f} –º—Å/–≥–æ–¥")

    def process_file(self, input_file: str, output_dir: str = "output"):
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {input_file}")

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(output_dir, exist_ok=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        star_data = self.load_star_data(input_file)
        if not star_data:
            return False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_stars = self.process_star_data(star_data)
        if not processed_stars:
            return False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã
        sorted_stars = self.sort_stars_by_distance(processed_stars)

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        matrix = self.create_distance_matrix(sorted_stars)
        if matrix.size == 0:
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_file = os.path.join(output_dir, "processed_stars.json")
        self.save_processed_data(sorted_stars, output_file)

        matrix_file = os.path.join(output_dir, "distance_matrix.txt")
        self.save_matrix_to_file(matrix, matrix_file)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics(sorted_stars)

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}/")
        return True


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    processor = StarMatrixProcessor()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "tests/test_stars_small.json"
    if os.path.exists(test_file):
        processor.process_file(test_file)
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
